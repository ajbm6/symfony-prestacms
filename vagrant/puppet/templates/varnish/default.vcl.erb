backend default {
  .host = "127.0.0.1";
  .port = "<%= scope.lookupvar('varnish::backendport') %>";
}


### Purge du cache ###
acl purgers {
        "localhost";
}
sub vcl_hit {
        if (req.request == "PURGE") {
                ban_url(req.url);
                error 200 "Purged";
        }
}
sub vcl_miss {
        if (req.request == "PURGE") { 
                error 404 "Not in cache";
        }
}
sub vcl_pass {
        if (req.request == "PURGE") {
                error 502 "PURGE on a passed object";
        }
}

### client=>varnish ###
sub vcl_recv {

        set req.backend = default;

        ### gestion purge cache
        if (req.request == "PURGE") {
                if (!client.ip ~ purgers) {
                        error 405 "Method not allowed";
                }
                return (lookup);
        }

	### test BAN
        if (req.request == "BAN") {
                # Same ACL check as above:
                if (!client.ip ~ purgers) {
                        error 405 "Not allowed.";
                }
                ban("req.http.host == " + req.http.host +
                      "&& req.url == " + req.url);

                # Throw a synthetic page so the
                # request won't go to the backend.
                error 200 "Ban added";
        }

        ###
        # forward client ip
        remove req.http.X-Forwarded-For;
        set req.http.X-Forwarded-For = client.ip; 

        # pass request with post, don't put in cache
        if (req.request == "POST") {
                return (pass);
        }

       if(req.url ~ "^/admin" )
       {
	  return (pass);
       }
       return(lookup);

}

### reponse backend => varnish
sub vcl_fetch {

      if(req.url ~ "^/admin")
      {
         return (hit_for_pass);
      }

	# supprime le cookie
	unset beresp.http.set-cookie;
	# active les ESI
	set beresp.do_esi = true;
	# temps de cache
	set beresp.ttl = 1m;

       return(deliver);

}

